"""
Thai WHT Calculation Override for Purchase Order
Prevents ERPNext standard Tax Withholding Category interference
and provides precise Thai-compliant WHT calculations
"""

import frappe
from frappe.utils import flt, cint
from frappe import _

@frappe.whitelist()
def override_purchase_order_wht_calculation(doc, method=None):
    """
    Override ERPNext's standard WHT calculation for Thai compliance.
    Called via hooks to intercept and replace standard ERPNext WHT logic.

    Args:
        doc: Purchase Order document
        method: Hook method name
    """

    # Only process if Thai WHT system is enabled
    if not getattr(doc, 'apply_thai_wht_compliance', 0) or not getattr(doc, 'subject_to_wht', 0):
        return

    # Prevent ERPNext's standard Tax Withholding Category calculation
    disable_standard_wht_calculation(doc)

    # Apply Thai-specific WHT calculation
    calculate_thai_compliant_wht(doc)

    frappe.logger().info(f"Thai WHT Override applied to Purchase Order {doc.name}")


def disable_standard_wht_calculation(doc):
    """
    Prevent ERPNext's automatic Tax Withholding Category calculation
    by removing any auto-generated tax withholding entries
    """

    if not hasattr(doc, 'taxes') or not doc.taxes:
        return

    # Remove any tax entries that were auto-generated by ERPNext's WHT system
    taxes_to_remove = []
    for idx, tax in enumerate(doc.taxes):
        if tax.account_head and 'withholding' in tax.account_head.lower():
            taxes_to_remove.append(idx)

    # Remove in reverse order to maintain indices
    for idx in reversed(taxes_to_remove):
        doc.taxes.pop(idx)

    frappe.logger().info(f"Removed {len(taxes_to_remove)} ERPNext WHT tax entries")


def calculate_thai_compliant_wht(doc):
    """
    Calculate WHT using Thai compliance rules:
    - Use net_total (before VAT) as calculation base
    - Apply precise percentage calculation without rounding quirks
    - Support Thai retention system integration
    """

    # Get WHT rate from custom field
    wht_rate = flt(getattr(doc, 'custom_withholding_tax', 0))
    if wht_rate <= 0:
        return

    # Calculate base amount (net total before VAT)
    base_amount = get_wht_calculation_base(doc)

    # Precise WHT calculation: base_amount × rate ÷ 100
    wht_amount = flt(base_amount * wht_rate / 100, 2)  # Round to 2 decimal places

    # Update custom WHT fields
    doc.custom_withholding_tax_amount = wht_amount

    # Calculate final payment amount (after WHT and retention)
    retention_amount = flt(getattr(doc, 'custom_retention_amount', 0))
    final_payment = flt(doc.grand_total) - wht_amount - retention_amount
    doc.custom_payment_amount = final_payment

    # Update preview fields for user display
    update_thai_wht_preview_fields(doc, base_amount, wht_amount, final_payment)

    frappe.logger().info(
        f"Thai WHT Calculation: {base_amount} × {wht_rate}% = {wht_amount} "
        f"(Final Payment: {final_payment})"
    )


def get_wht_calculation_base(doc):
    """
    Get the correct base amount for WHT calculation.
    Thai WHT should be calculated on net amount before VAT.
    """

    # Priority order for base amount selection
    if hasattr(doc, 'net_total') and doc.net_total:
        return flt(doc.net_total)
    elif hasattr(doc, 'base_net_total') and doc.base_net_total:
        return flt(doc.base_net_total)
    elif hasattr(doc, 'total') and doc.total:
        return flt(doc.total)
    else:
        # Fallback: calculate net total from items
        net_total = sum(flt(item.amount) for item in doc.items if item.amount)
        return flt(net_total)


def update_thai_wht_preview_fields(doc, base_amount, wht_amount, final_payment):
    """
    Update Thai WHT preview section fields for better user experience
    """

    # Update net total after WHT field: grand_total - wht_amount
    # This represents: base_amount + VAT - WHT
    doc.net_total_after_wht = flt(doc.grand_total) - wht_amount

    # Update in words fields if they exist
    if hasattr(doc, 'net_total_after_wht_in_words'):
        from frappe.utils import money_in_words
        doc.net_total_after_wht_in_words = money_in_words(
            doc.net_total_after_wht,
            doc.currency
        )

    # Update combined WHT and retention amounts
    if hasattr(doc, 'custom_net_total_after_wht_retention'):
        doc.custom_net_total_after_wht_retention = final_payment

        if hasattr(doc, 'custom_net_total_after_wht_retention_in_words'):
            doc.custom_net_total_after_wht_retention_in_words = money_in_words(
                final_payment,
                doc.currency
            )


@frappe.whitelist()
def validate_thai_wht_configuration(doc, method=None):
    """
    Validate Thai WHT configuration to ensure proper setup
    """

    if not getattr(doc, 'apply_thai_wht_compliance', 0):
        return

    # Validate required fields for Thai WHT
    if getattr(doc, 'subject_to_wht', 0):
        if not getattr(doc, 'wht_income_type'):
            frappe.throw(_("WHT Income Type is required when Subject to Withholding Tax is enabled"))

        # Auto-fetch default WHT rate from Company if not specified
        if not getattr(doc, 'custom_withholding_tax') or flt(getattr(doc, 'custom_withholding_tax', 0)) == 0:
            default_wht_rate = frappe.db.get_value("Company", doc.company, "default_wht_rate")

            if default_wht_rate and flt(default_wht_rate) > 0:
                doc.custom_withholding_tax = flt(default_wht_rate)
                frappe.logger().info(f"Auto-fetched default WHT rate {default_wht_rate}% from Company {doc.company}")

                # Show user-friendly message
                frappe.msgprint(
                    _("Auto-applied default WHT rate {0}% from Company settings").format(flt(default_wht_rate)),
                    indicator='blue'
                )
            else:
                frappe.throw(_("Withholding Tax percentage is required. Please set either in this document or configure a default rate in Company settings."))

    # Validate VAT treatment for TDS transactions
    vat_treatment = getattr(doc, 'vat_treatment', '')
    if vat_treatment and vat_treatment not in ['VAT Undue (7%)', 'Exempt from VAT']:
        frappe.msgprint(
            _("Consider using 'VAT Undue (7%)' for TDS transactions to comply with Thai tax regulations"),
            indicator='yellow'
        )


@frappe.whitelist()
def get_thai_wht_calculation_debug_info(purchase_order_name):
    """
    Debug function to analyze WHT calculation differences
    Returns detailed breakdown of both ERPNext and Thai calculations
    """

    doc = frappe.get_doc("Purchase Order", purchase_order_name)

    debug_info = {
        "document": purchase_order_name,
        "apply_thai_wht_compliance": getattr(doc, 'apply_thai_wht_compliance', 0),
        "subject_to_wht": getattr(doc, 'subject_to_wht', 0),
        "wht_rate": flt(getattr(doc, 'custom_withholding_tax', 0)),
        "amounts": {
            "net_total": flt(getattr(doc, 'net_total', 0)),
            "base_net_total": flt(getattr(doc, 'base_net_total', 0)),
            "total": flt(getattr(doc, 'total', 0)),
            "grand_total": flt(getattr(doc, 'grand_total', 0)),
        },
        "thai_calculation": {},
        "erpnext_calculation": {}
    }

    # Thai calculation
    if debug_info["wht_rate"] > 0:
        base_amount = get_wht_calculation_base(doc)
        thai_wht = flt(base_amount * debug_info["wht_rate"] / 100, 2)

        debug_info["thai_calculation"] = {
            "base_amount": base_amount,
            "calculation": f"{base_amount} × {debug_info['wht_rate']}% = {thai_wht}",
            "wht_amount": thai_wht
        }

    # ERPNext standard calculation (if any tax withholding entries exist)
    if hasattr(doc, 'taxes') and doc.taxes:
        for tax in doc.taxes:
            if tax.account_head and 'withholding' in tax.account_head.lower():
                debug_info["erpnext_calculation"] = {
                    "account": tax.account_head,
                    "tax_amount": flt(tax.tax_amount),
                    "base_tax_amount": flt(tax.base_tax_amount),
                    "rate": flt(tax.rate)
                }
                break

    return debug_info


@frappe.whitelist()
def test_thai_wht_calculation_precision():
    """
    Test function to verify Thai WHT calculation precision
    Tests the critical case: 10,000 × 3% should equal exactly 300 (not 306)
    """

    # Test case that was failing with ERPNext standard calculation
    test_cases = [
        {"base_amount": 10000, "rate": 3, "expected": 300},
        {"base_amount": 5000, "rate": 3, "expected": 150},
        {"base_amount": 15000, "rate": 5, "expected": 750},
        {"base_amount": 100000, "rate": 1, "expected": 1000},
    ]

    results = []

    for case in test_cases:
        # Use same calculation logic as our override
        calculated = flt(case["base_amount"] * case["rate"] / 100, 2)

        test_result = {
            "base_amount": case["base_amount"],
            "rate": case["rate"],
            "expected": case["expected"],
            "calculated": calculated,
            "precise": calculated == case["expected"],
            "calculation_string": f"{case['base_amount']} × {case['rate']}% = {calculated}"
        }

        results.append(test_result)

    # Summary
    all_precise = all(result["precise"] for result in results)

    return {
        "test_results": results,
        "all_calculations_precise": all_precise,
        "message": "✅ All calculations precise!" if all_precise else "❌ Some calculations imprecise",
        "critical_case": f"10,000 × 3% = {flt(10000 * 3 / 100, 2)} (should be 300)"
    }


@frappe.whitelist()
def test_thai_wht_automation():
    """
    Test function to verify the complete Thai WHT automation workflow
    Creates a test Purchase Order to verify field automation and calculation
    """

    try:
        # Create a test Purchase Order with Thai WHT enabled
        test_po = frappe.new_doc("Purchase Order")
        test_po.supplier = "Test Supplier"  # Use a simple supplier name
        test_po.currency = "THB"
        test_po.company = frappe.defaults.get_defaults().get("company")

        # Add a test item
        test_po.append("items", {
            "item_code": "Test Item",
            "description": "Test Service Item",
            "qty": 1,
            "rate": 10000,
            "amount": 10000
        })

        # Calculate totals to simulate ERPNext behavior
        test_po.net_total = 10000
        test_po.total = 10000
        test_po.grand_total = 10000

        # Enable Thai WHT Compliance
        test_po.apply_thai_wht_compliance = 1
        test_po.subject_to_wht = 1
        test_po.custom_withholding_tax = 3  # 3%
        test_po.wht_income_type = "professional_services"

        # Test our calculation override
        calculate_thai_compliant_wht(test_po)

        # Collect results
        results = {
            "test_status": "success",
            "base_amount": flt(test_po.net_total),
            "wht_rate": flt(test_po.custom_withholding_tax),
            "calculated_wht": flt(getattr(test_po, 'custom_withholding_tax_amount', 0)),
            "expected_wht": 300,
            "calculation_correct": flt(getattr(test_po, 'custom_withholding_tax_amount', 0)) == 300,
            "final_payment": flt(getattr(test_po, 'custom_payment_amount', 0)),
            "message": "✅ Thai WHT calculation working correctly!" if flt(getattr(test_po, 'custom_withholding_tax_amount', 0)) == 300 else "❌ Thai WHT calculation issue detected"
        }

        return results

    except Exception as e:
        return {
            "test_status": "error",
            "error_message": str(e),
            "message": f"❌ Test failed: {str(e)}"
        }